/* tslint:disable */
/* eslint-disable */
/**
 * Unnamed API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreateRecipeRequest,
  FullRecipe,
  PageForSimpleRecipe,
  SingleUuid,
  UpdateRecipeRequest,
} from '../models/index';

export interface CreateRecipeOperationRequest {
    CreateRecipeRequest: CreateRecipeRequest;
}

export interface DeleteRecipeRequest {
    uuid: string;
}

export interface GetAllRecipesRequest {
    limit?: number;
    offset?: number;
}

export interface GetRecipeRequest {
    uuid: string;
}

export interface UpdateRecipeOperationRequest {
    uuid: string;
    UpdateRecipeRequest: UpdateRecipeRequest;
}

/**
 * 
 */
export class RecipesApi extends runtime.BaseAPI {

    /**
     */
    async createRecipeRaw(requestParameters: CreateRecipeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleUuid>> {
        if (requestParameters['CreateRecipeRequest'] == null) {
            throw new runtime.RequiredError(
                'CreateRecipeRequest',
                'Required parameter "CreateRecipeRequest" was null or undefined when calling createRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/recipes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['CreateRecipeRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async createRecipe(requestParameters: CreateRecipeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleUuid> {
        const response = await this.createRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRecipeRaw(requestParameters: DeleteRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling deleteRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/recipes/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRecipe(requestParameters: DeleteRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecipeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllRecipesRaw(requestParameters: GetAllRecipesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageForSimpleRecipe>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/recipes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getAllRecipes(requestParameters: GetAllRecipesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageForSimpleRecipe> {
        const response = await this.getAllRecipesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecipeRaw(requestParameters: GetRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullRecipe>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/recipes/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getRecipe(requestParameters: GetRecipeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullRecipe> {
        const response = await this.getRecipeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRecipeRaw(requestParameters: UpdateRecipeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling updateRecipe().'
            );
        }

        if (requestParameters['UpdateRecipeRequest'] == null) {
            throw new runtime.RequiredError(
                'UpdateRecipeRequest',
                'Required parameter "UpdateRecipeRequest" was null or undefined when calling updateRecipe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/recipes/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['UpdateRecipeRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateRecipe(requestParameters: UpdateRecipeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateRecipeRaw(requestParameters, initOverrides);
    }

}
